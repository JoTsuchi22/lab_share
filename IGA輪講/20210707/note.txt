IGA 輪講メモ

私たちが定義したk-refinementは，伝統的な意味での「refinement」ではないことに注意してください．

図2.24の例をもう一度考えると，
図2.24aで二次関数から五次関数にp-refineすると，基底関数の各セットは、低次の基底のいずれかで表現できるすべての関数を表現することができます．

各ステップで基底関数が変化するが、何も失われないので、空間は「豊かに」なっていた．
一方、図2.24bのk-refinementプロセスはこの性質を持ちません．

これは，連続性だけを考えれば明らかで，
k-refinementでは次数pではp回目の導関数に不連続性があるが，
order elevationしたp+1次のすべての導関数はp回目の導関数に連続性がある．
そのため一連の高次の基底は，より高い近似特性があるが，
低次の関数と同じ関数のセットを表すことができません．

これはk-refinementの欠点ではなく，伝統的なh-refinement，p-refinementとの違いです．

また，重要な注意事項として，すべての関数が要素の境界を越えて最大でC(p-1)連続を維持する"純粋な"k-refinementは，
最も粗いメッシュが単一の要素で構成されている場合のみに可能であることに注意する必要があります．

初期メッシュが特定の要素境界での連続性に制約を与えている場合、その制約はすべてのメッシュに存在することになります。
一般的には、このような制約があっても、解析に必要な要素数は、形状のモデリングに必要な要素数よりもはるかに多くなります
関数がこれらの新しい要素境界でp-1連続になるようにリファインを行ってもk-refinementの効果は依然として大きいと言えます．

// まとめ(読まない)
// 解析のためには，モデリング形状から要素数を増やすrefinementを行う必要があるが，k-refinementが最も優れている